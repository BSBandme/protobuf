#define DEBUG
//#define USEPB_DS
#define USETR1
#define CPPELEVEN
#define GPP

/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")

#include <bits/stdc++.h>

using namespace std;

#ifndef CPPELEVEN
#ifdef USETR1
#include <tr1/unordered_map>
#include <tr1/unordered_set>
using namespace tr1;
#endif
#else
#include <unordered_map>
#include <unordered_set>
#endif

#ifdef USEPB_DS
#include <ext/pb_ds/priority_queue.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
// binomial_heap_tag, rc_binomial_heap_tag, thin_heap_tag, binary_heap_tag
typedef __gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> pq_type;
// splay_tree_tag, ov_tree_tag
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> tree_type;
#endif

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const long double eps = 1e-10;
const int step[8][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

#ifndef CPPELEVEN
template <class T> inline T max1(T a, T b) { return b < a ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }
#else
template <typename t, typename t1>
t min1(t a, t1 b) { return a < b ? a : b; }
template <typename t, typename... arg>
t min1(t a, arg... arr) { return min1(a, min1(arr...)); }
template <typename t, typename t1>
t max1(t a, t1 b) { return a > b ? a : b; }
template <typename t, typename... arg>
t max1(t a, arg... arr) { return max1(a, max1(arr...)); }
#endif

inline int jud(double a, double b){
  if(abs(a) < eps && abs(b) < eps) return 0;
  else if(abs1(a - b) / max(abs1(a), abs1(b)) < eps) return 0;
  if(a < b) return -1;
  return 1;
}
template <typename t> inline int jud(t a, t b){
  if(a < b) return -1;
  if(a == b) return 0;
  return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
  if(na == 0) return 0;
  int be = 0, en = na - 1;
  if(*a <= *(a + na - 1)){
    if(f_lb == 0) while(be < en){
      int mid = (be + en + 1) / 2;
      if(jud(*(a + mid), val) != 1) be = mid;
      else en = mid - 1;
    }else while(be < en){
      int mid = (be + en) / 2;
      if(jud(*(a + mid), val) != -1) en = mid;
      else be = mid + 1;
    }
    if(f_small && jud(*(a + be), val) == 1) be--;
    if(!f_small && jud(*(a + be), val) == -1) be++;
  } else {
    if(f_lb) while(be < en){
      int mid = (be + en + 1) / 2;
      if(jud(*(a + mid), val) != -1) be = mid;
      else en = mid - 1;
    }else while(be < en){
      int mid = (be + en) / 2;
      if(jud(*(a + mid), val) != 1) en = mid;
      else be = mid + 1;
    }
    if(!f_small && jud(*(a + be), val) == -1) be--;
    if(f_small && jud(*(a + be), val) == 1) be++;
  }
  return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
#ifdef GPP
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
#else
#endif

long long pow(long long n, long long m, long long mod = 0){
  if(m < 0) return 0;
  long long ans = 1;
  long long k = n;
  while(m){
    if(m & 1) {
      ans *= k;
      if(mod) ans %= mod;
    }
    k *= k;
    if(mod) k %= mod;
    m >>= 1;
  }
  return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
  if(mod == -1) mod = MOD;
  a += b;
  while(a >= mod) a -= mod;
  while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
  for(int i = 0; i < (int)arr.size(); i++)
    cerr << arr[i] << ' ';
  cerr << endl;
}
template <class t>
void output2(t arr) {
  for(int i = 0; i < (int)arr.size(); i++)
    output1(arr[i]);
}

//....................密..........封..........线..........下..........禁..........止..........hack...............................................

map<pair<string, string>, pair<double, double>> java_parsing_result;
map<pair<string, string>, pair<double, double>> java_serialization_result;
map<pair<string, string>, pair<double, string>> cpp_parsing_result;
map<pair<string, string>, pair<double, string>> cpp_serialization_result;
map<pair<string, string>, pair<double, double>> python_parsing_result;
map<pair<string, string>, pair<double, double>> python_serialization_result;

set<string> java_parse_name, java_serialize_name;
set<string> cpp_parse_name, cpp_serialize_name;
set<string> python_parse_name, python_serialize_name;
set<string> data_file;

map<string, double> average_size_per_message;

int find_first_substring(const string &orig, string sub) {
  for (int i = 0; i <= (int)orig.size() - (int)sub.size(); i++) {
    if (orig.substr(i, sub.size()) == sub) {
      return i;
    }
  }
  return -1;
}

string get_string(double val) {
  char str[20];
  sprintf(str, "%.0f", val);
  int lstr = strlen(str);
  string ans = "";
  for (int i = lstr; i > 0; i -= 3) {
    if (ans != "") ans = "," + ans;
    int st = max(i - 3, 0);
    ans = string(str + st, str + i) + ans;
  }
  return ans;
}

string get_throughput(double val) {
  ostringstream oss;
//  oss << val;
  if (val > 1024) {
    oss << val / 1024 << "GB/s";
  } else {
    oss << val << "MB/s";
  }
  return oss.str();
}

void read_cpp(string file_name) {
  ifstream ifs(file_name);
  string line;
  string parse_name;
  while (getline(ifs, line)) {
    istringstream is(line);
    string name;
    is >> name;
    int idx = 0;
    if ((idx = find_first_substring(name, "parse_")) != -1) {
      parse_name = name.substr(idx + 6);
      name = name.substr(0, idx - 1);
    } else {
      idx = find_first_substring(name, "serialize");
      parse_name = "";
      name = name.substr(0, idx - 1);
    }
    double val;
    is >> val;
    string throughput;
    is >> throughput >> throughput >> throughput >> throughput >> throughput;
    cpp_serialize_name.insert("");
    data_file.insert(name);
    if (parse_name != "") {
      cpp_parsing_result[mpr(name, parse_name)] = mpr(val, throughput);
      cpp_parse_name.insert(parse_name);
    } else {
      cpp_serialization_result[mpr(name, "")] = mpr(val, throughput);
    }
  }
}

void read_java(string file_name) {
  ifstream ifs(file_name);
  string line;
  string data_file_name, benchmark_name;
  while (getline(ifs, line)) {
    int idx = 0;
    if ((idx = find_first_substring(line, "dataFile=")) != -1) {
      idx += 9;
      const string &rline = line.substr(idx);
      int first_bracket = rline.find_first_of("[");
      int last_bracket = rline.find_first_of("]");
      const string &full_name = rline.substr(
          first_bracket + 1, last_bracket - first_bracket - 1);
      int last_point = full_name.find_last_of(".");
      int last_two_point = full_name.substr(0, last_point).find_last_of(".");
      data_file_name = full_name.substr(
          last_two_point + 1, last_point - last_two_point - 1);
      data_file.insert(data_file_name);
    }
    if ((idx = find_first_substring(line, "benchmarkMethod=")) != -1) {
      idx += 16;
      const string &rline = line.substr(idx);
      benchmark_name = rline.substr(0, rline.find_first_of(","));
    }
    if ((idx = find_first_substring(line, "mean=")) != -1) {
      idx += 5;
      const string &rline = line.substr(idx);
      string val_string = rline.substr(0, rline.find_first_of(","));
      istringstream is(val_string);
      double val;
      is >> val;
      if (benchmark_name.substr(0, 2) == "de") {
        java_parsing_result[mpr(data_file_name, benchmark_name)] =
            mpr(val, 1000 * average_size_per_message[data_file_name] / val);
        java_parse_name.insert(benchmark_name);
      } else {
        java_serialization_result[mpr(data_file_name, benchmark_name)] =
            mpr(val, 1000 * average_size_per_message[data_file_name] / val);
        java_serialize_name.insert(benchmark_name);
      }
    }
  }
}

void read_python(string file_name) {
  ifstream ifs(file_name);
  string line;
  string data_file_name, benchmark_name;
  while (getline(ifs, line)) {
    int idx = 0;
    if ((idx = find_first_substring(line, "./python")) != -1) {
      idx += 9;
      const string &rline = line.substr(idx);
      int last_bracket = find_first_substring(rline, "-benchmark");
      benchmark_name = rline.substr(0, last_bracket);
    }
    if ((idx = find_first_substring(line, "./dataset")) != -1) {
      idx += 9;
      const string &full_name = line.substr(idx);
      int last_point = full_name.find_last_of(".");
      int last_two_point = full_name.substr(0, last_point).find_last_of(".");
      data_file_name = full_name.substr(
          last_two_point + 1, last_point - last_two_point - 1);
      data_file.insert(data_file_name);
    }
    if ((idx = find_first_substring(line, "Average")) != -1) {
      istringstream is(line);
      string temp;
      double val;
      is >> temp >> temp >> temp >> temp >> val;
      if (find_first_substring(line, "parse") != -1) {
        python_parsing_result[mpr(data_file_name, benchmark_name)] =
            mpr(val, 1000 * average_size_per_message[data_file_name] / val);
        python_parse_name.insert(benchmark_name);
      } else {
        python_serialization_result[mpr(data_file_name, benchmark_name)] =
            mpr(val, 1000 * average_size_per_message[data_file_name] / val);
        python_serialize_name.insert(benchmark_name);
      }
    }
  }
}

void generated_parsing() {
  puts("## <b>Parsing</b>");
  puts("<table>");
  puts("<tr>");
  puts("<th rowspan=\"2\"> </th>");
  printf("<th colspan=\"%d\" rowspan=\"%d\">cpp</th>\n",
         (int) cpp_parse_name.size() * 2,
         (int) (cpp_parse_name.size() == 1) + 1);
  printf("<th colspan=\"%d\" rowspan=\"%d\">java</th>\n",
         (int) java_parse_name.size() * 2,
         (int) (java_parse_name.size() == 1) + 1);
  printf("<th colspan=\"%d\" rowspan=\"%d\">python</th>\n",
         (int) python_parse_name.size() * 2,
         (int) (python_parse_name.size() == 1) + 1);
  puts("</tr>");
  puts("<tr>");
  if (cpp_parse_name.size() != 1) {
    for (auto name : cpp_parse_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  if (java_parse_name.size() != 1) {
    for (auto name : java_parse_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  if (python_parse_name.size() != 1) {
    for (auto name : python_parse_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  puts("</tr>");
  for (string data_file_name : data_file) {
    puts("<tr>");
    printf("<td>%s</td>\n", data_file_name.c_str());
    for (auto benchmark_name : cpp_parse_name) {
      pair<double, string> val =
          cpp_parsing_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%s</td><td>%s</td>\n",
             get_string(val.first).c_str(), val.second.c_str());
    }
    for (auto benchmark_name : java_parse_name) {
      pair<double, double> val =
          java_parsing_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%s</td><td>%s</td>\n",
             get_string(val.first).c_str(), get_throughput(val.second).c_str());
    }
    for (auto benchmark_name : python_parse_name) {
      pair<double, double> val =
          python_parsing_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%s</td><td>%s</td>\n",
             get_string(val.first).c_str(), get_throughput(val.second).c_str());
    }
    puts("</tr>");
  }
  puts("</table>");
  puts("");
}

void generated_serialization() {
  puts("## <b>Serialization</b>");
  puts("<table>");
  puts("<tr>");
  puts("<th rowspan=\"2\"> </th>");
  printf("<th colspan=\"%d\" rowspan=\"%d\">cpp</th>\n",
         (int) cpp_serialize_name.size() * 2,
         (int) (cpp_serialize_name.size() == 1) + 1);
  printf("<th colspan=\"%d\" rowspan=\"%d\">java</th>\n",
         (int) java_serialize_name.size() * 2,
         (int) (java_serialize_name.size() == 1) + 1);
  printf("<th colspan=\"%d\" rowspan=\"%d\">python</th>\n",
         (int) python_serialize_name.size() * 2,
         (int) (python_serialize_name.size() == 1) + 1);
  puts("</tr>");
  puts("<tr>");
  if (cpp_serialize_name.size() != 1) {
    for (auto name : cpp_serialize_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  if (java_serialize_name.size() != 1) {
    for (auto name : java_serialize_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  if (python_serialize_name.size() != 1) {
    for (auto name : python_serialize_name) {
      printf("<th colspan=\"2\">%s</th>\n", name.c_str());
    }
  }
  puts("</tr>");
  for (string data_file_name : data_file) {
    puts("<tr>");
    printf("<td>%s</td>\n", data_file_name.c_str());
    for (auto benchmark_name : cpp_serialize_name) {
      pair<double, string> val =
          cpp_serialization_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%sns</td><td>%s</td>\n",
             get_string(val.first).c_str(), val.second.c_str());
    }
    for (auto benchmark_name : java_serialize_name) {
      pair<double, double> val =
          java_serialization_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%sns</td><td>%s</td>\n",
             get_string(val.first).c_str(), get_throughput(val.second).c_str());
    }
    for (auto benchmark_name : python_serialize_name) {
      pair<double, double> val =
          python_serialization_result[mpr(data_file_name, benchmark_name)];
      printf("<td>%sns</td><td>%s</td>\n",
             get_string(val.first).c_str(), get_throughput(val.second).c_str());
    }
    puts("</tr>");
  }
  puts("</table>");
  puts("");
}


int main() {

//............................不要再忘了检查maxn大小了！！！！BSBandme你个SB！！！！...................................................

  ios_base::sync_with_stdio(0);
  #ifdef DEBUG //......................................................................................................
  freopen("input.txt", "r", stdin);
  #endif //...........................................................................................................

  average_size_per_message["google_message2"] = 84570;
  average_size_per_message["google_message1_proto2"] = 228;
  average_size_per_message["google_message1_proto3"] = 228;
  average_size_per_message["google_message4"] = 18687.277215502345;
  average_size_per_message["google_message3_4"] = 16161.58529111338;
  average_size_per_message["google_message3_3"] = 75.3473942530787;
  average_size_per_message["google_message3_5"] = 20.979602347823803;
  average_size_per_message["google_message3_2"] = 366554.9166666667;
  average_size_per_message["google_message3_1"] = 200567668;
  read_python("python_result.txt");
  read_cpp("cpp_result.txt");
  read_java("java_result.txt");
  generated_parsing();
  generated_serialization();

  return 0;
}
